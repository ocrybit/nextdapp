{"ast":null,"code":"var _jsxFileName = \"/home/basque/hide/next-dapp/nd/core/Conf.js\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from \"react\";\nimport { type, allPass, o, either, equals, isNil, complement, keys, map } from \"ramda\";\nimport { bind } from \"nd\";\nconst isPlainObject = allPass([o(equals(\"Object\"), type), complement(isNil), either(o(equals(Object.prototype), Object.getPrototypeOf), o(isNil, Object.getPrototypeOf))]);\nexport default bind(props => {\n  const td = {\n    padding: \"10px\",\n    backgroundColor: \"#eee\"\n  };\n  const td2 = {\n    padding: \"10px\",\n    backgroundColor: \"#ddd\",\n    textAlign: \"center\"\n  };\n  const th = {\n    padding: \"10px\",\n    backgroundColor: \"#ccc\",\n    textAlign: \"center\"\n  };\n  const th2 = {\n    padding: \"10px\",\n    backgroundColor: \"#222\",\n    color: \"white\",\n    textAlign: \"center\"\n  };\n  let conf = [];\n\n  for (let k in props.conf || {}) {\n    const v = props.conf[k];\n    const isObj = isPlainObject(v);\n    const rowSpan = isObj ? keys(v).length : 1;\n    const first = keys(v)[0];\n    conf.push(__jsx(\"tr\", {\n      key: first,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, __jsx(\"th\", {\n      style: th,\n      rowSpan: rowSpan,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, k), isObj ? __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, __jsx(\"td\", {\n      style: td2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, first), __jsx(\"td\", {\n      style: td,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, JSON.stringify(v[first]))) : __jsx(\"td\", {\n      colSpan: 2,\n      style: td,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }, JSON.stringify(v))));\n    if (isObj) conf = conf.concat(map(v2 => __jsx(\"tr\", {\n      key: v2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, __jsx(\"td\", {\n      style: td2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, v2), __jsx(\"td\", {\n      style: td,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, JSON.stringify(v[v2]))))(keys(v).slice(1)));\n  }\n\n  return __jsx(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: \"inline-block\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(\"tr\", {\n    key: \"nd/conf\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(\"th\", {\n    colSpan: 3,\n    style: th2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"nd/conf\"))), __jsx(\"tbody\", {\n    style: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, conf))));\n});","map":{"version":3,"sources":["/home/basque/hide/next-dapp/nd/core/Conf.js"],"names":["React","Fragment","type","allPass","o","either","equals","isNil","complement","keys","map","bind","isPlainObject","Object","prototype","getPrototypeOf","props","td","padding","backgroundColor","td2","textAlign","th","th2","color","conf","k","v","isObj","rowSpan","length","first","push","JSON","stringify","concat","v2","slice","display"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\"\nimport {\n  type,\n  allPass,\n  o,\n  either,\n  equals,\n  isNil,\n  complement,\n  keys,\n  map\n} from \"ramda\"\nimport { bind } from \"nd\"\nconst isPlainObject = allPass([\n  o(equals(\"Object\"), type),\n  complement(isNil),\n  either(\n    o(equals(Object.prototype), Object.getPrototypeOf),\n    o(isNil, Object.getPrototypeOf)\n  )\n])\n\nexport default bind(props => {\n  const td = { padding: \"10px\", backgroundColor: \"#eee\" }\n  const td2 = {\n    padding: \"10px\",\n    backgroundColor: \"#ddd\",\n    textAlign: \"center\"\n  }\n  const th = {\n    padding: \"10px\",\n    backgroundColor: \"#ccc\",\n    textAlign: \"center\"\n  }\n  const th2 = {\n    padding: \"10px\",\n    backgroundColor: \"#222\",\n    color: \"white\",\n    textAlign: \"center\"\n  }\n\n  let conf = []\n  for (let k in props.conf || {}) {\n    const v = props.conf[k]\n    const isObj = isPlainObject(v)\n    const rowSpan = isObj ? keys(v).length : 1\n    const first = keys(v)[0]\n    conf.push(\n      <tr key={first}>\n        <th style={th} rowSpan={rowSpan}>\n          {k}\n        </th>\n        {isObj ? (\n          <Fragment>\n            <td style={td2}>{first}</td>\n            <td style={td}>{JSON.stringify(v[first])}</td>\n          </Fragment>\n        ) : (\n          <td colSpan={2} style={td}>\n            {JSON.stringify(v)}\n          </td>\n        )}\n      </tr>\n    )\n    if (isObj)\n      conf = conf.concat(\n        map(v2 => (\n          <tr key={v2}>\n            <td style={td2}>{v2}</td>\n            <td style={td}>{JSON.stringify(v[v2])}</td>\n          </tr>\n        ))(keys(v).slice(1))\n      )\n  }\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div style={{ display: \"inline-block\" }}>\n        <table>\n          <thead>\n            <tr key=\"nd/conf\">\n              <th colSpan={3} style={th2}>\n                nd/conf\n              </th>\n            </tr>\n          </thead>\n          <tbody style={{ textAlign: \"left\" }}>{conf}</tbody>\n        </table>\n      </div>\n    </div>\n  )\n})\n"]},"metadata":{},"sourceType":"module"}