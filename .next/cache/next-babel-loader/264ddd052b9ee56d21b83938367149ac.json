{"ast":null,"code":"import plugins from \"nd/.plugins\";\nimport { hasPath } from \"ramda\";\nexport default (function (plugin) {\n  return function () {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    if (name === null) {\n      return hasPath([plugin, \"namespace\"])(plugins) && plugins[plugin].namespace !== null ? plugins[plugin].namespace : plugin;\n    } else {\n      var suffix = hasPath([plugin, \"namespace\"])(plugins) && plugins[plugin].namespace !== null ? \"$\".concat(plugins[plugin].namespace) : hasPath([plugin, \"core\"])(plugins) && plugins[plugin].core ? \"\" : \"$\".concat(plugin);\n      return name + suffix;\n    }\n  };\n});","map":{"version":3,"sources":["/home/basque/hide/next-dapp/nd/core/ns.js"],"names":["plugins","hasPath","plugin","name","namespace","suffix","core"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,aAApB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,gBAAe,UAAAC,MAAM;AAAA,SAAI,YAAiB;AAAA,QAAhBC,IAAgB,uEAAT,IAAS;;AACxC,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,aAAOF,OAAO,CAAC,CAACC,MAAD,EAAS,WAAT,CAAD,CAAP,CAA+BF,OAA/B,KACLA,OAAO,CAACE,MAAD,CAAP,CAAgBE,SAAhB,KAA8B,IADzB,GAEHJ,OAAO,CAACE,MAAD,CAAP,CAAgBE,SAFb,GAGHF,MAHJ;AAID,KALD,MAKO;AACL,UAAMG,MAAM,GACVJ,OAAO,CAAC,CAACC,MAAD,EAAS,WAAT,CAAD,CAAP,CAA+BF,OAA/B,KACAA,OAAO,CAACE,MAAD,CAAP,CAAgBE,SAAhB,KAA8B,IAD9B,cAEQJ,OAAO,CAACE,MAAD,CAAP,CAAgBE,SAFxB,IAGIH,OAAO,CAAC,CAACC,MAAD,EAAS,MAAT,CAAD,CAAP,CAA0BF,OAA1B,KAAsCA,OAAO,CAACE,MAAD,CAAP,CAAgBI,IAAtD,GACE,EADF,cAEMJ,MAFN,CAJN;AAOA,aAAOC,IAAI,GAAGE,MAAd;AACD;AACF,GAhBoB;AAAA,CAArB","sourcesContent":["import plugins from \"nd/.plugins\"\nimport { hasPath } from \"ramda\"\nexport default plugin => (name = null) => {\n  if (name === null) {\n    return hasPath([plugin, \"namespace\"])(plugins) &&\n      plugins[plugin].namespace !== null\n      ? plugins[plugin].namespace\n      : plugin\n  } else {\n    const suffix =\n      hasPath([plugin, \"namespace\"])(plugins) &&\n      plugins[plugin].namespace !== null\n        ? `$${plugins[plugin].namespace}`\n        : hasPath([plugin, \"core\"])(plugins) && plugins[plugin].core\n          ? \"\"\n          : `$${plugin}`\n    return name + suffix\n  }\n}\n"]},"metadata":{},"sourceType":"module"}