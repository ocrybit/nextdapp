{"ast":null,"code":"import { clone, mergeLeft, map, prop, is } from \"ramda\";\nimport setter from \"./setter\";\nimport { conf, global } from \"nd\";\n\nvar func = function func() {\n  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var fn = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (is(Function)(arr)) {\n    fn = arr;\n    arr = fn.props || [];\n  } else if (is(Array)(arr)) {\n    if (is(Function)(arr[1])) {\n      fn = arr[1];\n      arr = arr[0] || fn.props || [];\n    } else {\n      arr = arr || fn.props || [];\n    }\n  }\n\n  var _fn = function _fn() {\n    var _setter = setter(arr),\n        binder = _setter.binder,\n        set = _setter.set,\n        get = _setter.get;\n\n    return function (_val) {\n      var args = {\n        global: global,\n        conf: conf,\n        val: _val || {},\n        set: set,\n        get: get,\n        props: map(prop(\"get\"))(binder)\n      };\n\n      var _fn = function _fn(fn) {\n        return function (val) {\n          return fn(mergeLeft({\n            val: val,\n            fn: _fn,\n            binder: binder\n          }, args));\n        };\n      };\n\n      return fn(mergeLeft({\n        fn: _fn\n      }, args));\n    };\n  };\n\n  _fn.props = fn.props;\n  return _fn;\n};\n\nexport default func;","map":{"version":3,"sources":["/home/basque/hide/next-dapp/nd/core/func.js"],"names":["clone","mergeLeft","map","prop","is","setter","conf","global","func","arr","fn","Function","props","Array","_fn","binder","set","get","_val","args","val"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,EAAtC,QAAgD,OAAhD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,IAA7B;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAkB;AAAA,MAAjBC,GAAiB,uEAAX,EAAW;AAAA,MAAPC,EAAO;;AAC7B,MAAIN,EAAE,CAACO,QAAD,CAAF,CAAaF,GAAb,CAAJ,EAAuB;AACrBC,IAAAA,EAAE,GAAGD,GAAL;AACAA,IAAAA,GAAG,GAAGC,EAAE,CAACE,KAAH,IAAY,EAAlB;AACD,GAHD,MAGO,IAAIR,EAAE,CAACS,KAAD,CAAF,CAAUJ,GAAV,CAAJ,EAAoB;AACzB,QAAIL,EAAE,CAACO,QAAD,CAAF,CAAaF,GAAG,CAAC,CAAD,CAAhB,CAAJ,EAA0B;AACxBC,MAAAA,EAAE,GAAGD,GAAG,CAAC,CAAD,CAAR;AACAA,MAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,IAAUC,EAAE,CAACE,KAAb,IAAsB,EAA5B;AACD,KAHD,MAGO;AACLH,MAAAA,GAAG,GAAGA,GAAG,IAAIC,EAAE,CAACE,KAAV,IAAmB,EAAzB;AACD;AACF;;AACD,MAAME,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,kBACaT,MAAM,CAACI,GAAD,CADnB;AAAA,QACRM,MADQ,WACRA,MADQ;AAAA,QACAC,GADA,WACAA,GADA;AAAA,QACKC,GADL,WACKA,GADL;;AAEhB,WAAO,UAAAC,IAAI,EAAI;AACb,UAAMC,IAAI,GAAG;AACXZ,QAAAA,MAAM,EAANA,MADW;AAEXD,QAAAA,IAAI,EAAEA,IAFK;AAGXc,QAAAA,GAAG,EAAEF,IAAI,IAAI,EAHF;AAIXF,QAAAA,GAAG,EAAHA,GAJW;AAKXC,QAAAA,GAAG,EAAHA,GALW;AAMXL,QAAAA,KAAK,EAAEV,GAAG,CAACC,IAAI,CAAC,KAAD,CAAL,CAAH,CAAiBY,MAAjB;AANI,OAAb;;AAQA,UAAMD,GAAG,GAAG,SAANA,GAAM,CAAAJ,EAAE;AAAA,eAAI,UAAAU,GAAG;AAAA,iBACnBV,EAAE,CAACT,SAAS,CAAC;AAAEmB,YAAAA,GAAG,EAAEA,GAAP;AAAYV,YAAAA,EAAE,EAAEI,GAAhB;AAAqBC,YAAAA,MAAM,EAAEA;AAA7B,WAAD,EAAwCI,IAAxC,CAAV,CADiB;AAAA,SAAP;AAAA,OAAd;;AAEA,aAAOT,EAAE,CAACT,SAAS,CAAC;AAAES,QAAAA,EAAE,EAAEI;AAAN,OAAD,EAAcK,IAAd,CAAV,CAAT;AACD,KAZD;AAaD,GAfD;;AAgBAL,EAAAA,GAAG,CAACF,KAAJ,GAAYF,EAAE,CAACE,KAAf;AACA,SAAOE,GAAP;AACD,CA9BD;;AAgCA,eAAeN,IAAf","sourcesContent":["import { clone, mergeLeft, map, prop, is } from \"ramda\"\nimport setter from \"./setter\"\nimport { conf, global } from \"nd\"\nconst func = (arr = [], fn) => {\n  if (is(Function)(arr)) {\n    fn = arr\n    arr = fn.props || []\n  } else if (is(Array)(arr)) {\n    if (is(Function)(arr[1])) {\n      fn = arr[1]\n      arr = arr[0] || fn.props || []\n    } else {\n      arr = arr || fn.props || []\n    }\n  }\n  const _fn = () => {\n    const { binder, set, get } = setter(arr)\n    return _val => {\n      const args = {\n        global,\n        conf: conf,\n        val: _val || {},\n        set,\n        get,\n        props: map(prop(\"get\"))(binder)\n      }\n      const _fn = fn => val =>\n        fn(mergeLeft({ val: val, fn: _fn, binder: binder }, args))\n      return fn(mergeLeft({ fn: _fn }, args))\n    }\n  }\n  _fn.props = fn.props\n  return _fn\n}\n\nexport default func\n"]},"metadata":{},"sourceType":"module"}