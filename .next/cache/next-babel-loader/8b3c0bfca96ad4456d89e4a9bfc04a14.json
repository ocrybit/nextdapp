{"ast":null,"code":"import sweet from \"firestore-sweet\";\nimport { mergeLeft, isNil, complement } from \"ramda\";\nimport { xNil } from \"nd/util\";\n\nconst NodeRSA = require(\"node-rsa\");\n\nconst shortid = require(\"shortid\");\n\nexport const getData = async (db, conf, url) => {\n  const toRSAPublic = key => `-----BEGIN PUBLIC KEY-----\\n${key}\\n-----END PUBLIC KEY-----`;\n\n  const toRSAPrivate = key => `-----BEGIN RSA PRIVATE KEY-----\\n${key}\\n-----END RSA PRIVATE KEY-----`;\n\n  function fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n      return \"%\" + c.charCodeAt(0).toString(16);\n    });\n  }\n\n  const key = new NodeRSA({\n    b: 512\n  });\n  const key2 = new NodeRSA(toRSAPublic(conf.rsa.public));\n  const pub = key.exportKey(\"public\");\n  const text = \"Hello RSA!\";\n  const encrypted = key2.encrypt(pub, \"base64\");\n  const public_key = key.exportKey(\"public\");\n  const id = shortid.generate();\n  const encrypted_id = key2.encrypt(id, \"base64\");\n  db.set({\n    date: Date.now(),\n    public_key: encrypted\n  }, \"crypt\", id);\n\n  const _getData = async url => {\n    return await new Promise(async (res, rej) => {\n      let once = false;\n      let to = null;\n      let ret = {};\n      const unsubscribe = await db.on(\"crypt\", id, async doc => {\n        if (doc !== null && xNil(doc.value)) {\n          once = true;\n          ret.data = JSON.parse(key.decrypt(doc.value, \"utf8\"));\n          clearTimeout(to);\n          await unsubscribe();\n\n          if (xNil(ret.response)) {\n            res(ret);\n          }\n        }\n      });\n      to = setTimeout(async () => {\n        try {\n          await unsubscribe();\n\n          if (xNil(ret.response)) {\n            res(ret);\n          }\n        } catch (e) {}\n      }, 20000);\n      ret.response = await fetch(`${url}&crypt_id=${encodeURIComponent(encrypted_id)}`).then(response => response.json());\n      console.log(ret.response);\n\n      if (xNil(ret.data)) {\n        res(ret);\n      }\n    });\n  };\n\n  return await _getData(url);\n};\n\nclass FB {\n  constructor(conf = {}) {\n    this.conf = conf;\n    this.firebase = null;\n    this.storage = null;\n    this.firestore = null;\n    this.db = null;\n    this.init();\n  }\n\n  init() {\n    try {\n      this.firebase = window.firebase;\n    } catch (e) {}\n\n    try {\n      const config = {\n        apiKey: this.conf.fb.key,\n        authDomain: `${this.conf.fb.id}.firebaseapp.com`,\n        databaseURL: `https://${this.conf.fb.id}.firebaseio.com`,\n        projectId: this.conf.fb.id,\n        storageBucket: `${this.conf.fb.id}.appspot.com`,\n        messagingSenderId: this.conf.fb.sender,\n        timestampsInSnapshots: true\n      };\n\n      require(\"firebase/firestore\");\n\n      try {\n        this.firebase.initializeApp(config);\n        this.firebase.auth().useDeviceLanguage();\n      } catch (e) {}\n\n      try {\n        this.storage = this.firebase.storage();\n      } catch (e) {}\n\n      try {\n        const sweetened = sweet(this.firebase.firestore);\n        this.firestore = sweetened.firestore;\n        this.FieldValue = this.firebase.firestore.FieldValue;\n        this.db = sweetened;\n      } catch (e) {\n        console.log(e);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n}\n\nexport const fb = () => window._fb;\nexport const db = () => window._fb.db;\nexport const initFB = ({\n  set,\n  conf,\n  global\n}) => new Promise(async res => {\n  if (isNil(window)) {\n    res({\n      err: true,\n      message: \"no window\",\n      code: 1\n    });\n  } else {\n    let isFB = null;\n\n    do {\n      isFB = await new Promise(res => {\n        setTimeout(() => {\n          if (isNil(window.firebase)) {\n            res({\n              err: true,\n              message: \"no firebase\",\n              code: 2\n            });\n          } else {\n            window._fb = new FB(conf);\n\n            if (xNil(global)) {\n              global.fb = window._fb;\n              global.db = window._fb.db;\n            }\n\n            if (xNil(set)) set(true, \"isFB\");\n            res(mergeLeft({\n              err: false,\n              message: null,\n              code: 0\n            }, window._fb));\n          }\n        }, 100);\n      });\n    } while (isNil(isFB));\n\n    res(isFB);\n  }\n});","map":{"version":3,"sources":["/home/basque/hide/next-dapp/nd/fb/fb.js"],"names":["sweet","mergeLeft","isNil","complement","xNil","NodeRSA","require","shortid","getData","db","conf","url","toRSAPublic","key","toRSAPrivate","fixedEncodeURIComponent","str","encodeURIComponent","replace","c","charCodeAt","toString","b","key2","rsa","public","pub","exportKey","text","encrypted","encrypt","public_key","id","generate","encrypted_id","set","date","Date","now","_getData","Promise","res","rej","once","to","ret","unsubscribe","on","doc","value","data","JSON","parse","decrypt","clearTimeout","response","setTimeout","e","fetch","then","json","console","log","FB","constructor","firebase","storage","firestore","init","window","config","apiKey","fb","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","sender","timestampsInSnapshots","initializeApp","auth","useDeviceLanguage","sweetened","FieldValue","_fb","initFB","global","err","message","code","isFB"],"mappings":"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","sourcesContent":["import sweet from \"firestore-sweet\"\nimport { mergeLeft, isNil, complement } from \"ramda\"\nimport { xNil } from \"nd/util\"\nconst NodeRSA = require(\"node-rsa\")\nconst shortid = require(\"shortid\")\n\nexport const getData = async (db, conf, url) => {\n  const toRSAPublic = key =>\n    `-----BEGIN PUBLIC KEY-----\\n${key}\\n-----END PUBLIC KEY-----`\n  const toRSAPrivate = key =>\n    `-----BEGIN RSA PRIVATE KEY-----\\n${key}\\n-----END RSA PRIVATE KEY-----`\n  function fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n      return \"%\" + c.charCodeAt(0).toString(16)\n    })\n  }\n  const key = new NodeRSA({ b: 512 })\n  const key2 = new NodeRSA(toRSAPublic(conf.rsa.public))\n  const pub = key.exportKey(\"public\")\n  const text = \"Hello RSA!\"\n  const encrypted = key2.encrypt(pub, \"base64\")\n  const public_key = key.exportKey(\"public\")\n  const id = shortid.generate()\n  const encrypted_id = key2.encrypt(id, \"base64\")\n  db.set({ date: Date.now(), public_key: encrypted }, \"crypt\", id)\n  const _getData = async url => {\n    return await new Promise(async (res, rej) => {\n      let once = false\n      let to = null\n      let ret = {}\n      const unsubscribe = await db.on(\"crypt\", id, async doc => {\n        if (doc !== null && xNil(doc.value)) {\n          once = true\n          ret.data = JSON.parse(key.decrypt(doc.value, \"utf8\"))\n          clearTimeout(to)\n          await unsubscribe()\n          if (xNil(ret.response)) {\n            res(ret)\n          }\n        }\n      })\n      to = setTimeout(async () => {\n        try {\n          await unsubscribe()\n          if (xNil(ret.response)) {\n            res(ret)\n          }\n        } catch (e) {}\n      }, 20000)\n      ret.response = await fetch(\n        `${url}&crypt_id=${encodeURIComponent(encrypted_id)}`\n      ).then(response => response.json())\n      console.log(ret.response)\n      if (xNil(ret.data)) {\n        res(ret)\n      }\n    })\n  }\n  return await _getData(url)\n}\n\nclass FB {\n  constructor(conf = {}) {\n    this.conf = conf\n    this.firebase = null\n    this.storage = null\n    this.firestore = null\n    this.db = null\n    this.init()\n  }\n\n  init() {\n    try {\n      this.firebase = window.firebase\n    } catch (e) {}\n    try {\n      const config = {\n        apiKey: this.conf.fb.key,\n        authDomain: `${this.conf.fb.id}.firebaseapp.com`,\n        databaseURL: `https://${this.conf.fb.id}.firebaseio.com`,\n        projectId: this.conf.fb.id,\n        storageBucket: `${this.conf.fb.id}.appspot.com`,\n        messagingSenderId: this.conf.fb.sender,\n        timestampsInSnapshots: true\n      }\n      require(\"firebase/firestore\")\n      try {\n        this.firebase.initializeApp(config)\n        this.firebase.auth().useDeviceLanguage()\n      } catch (e) {}\n      try {\n        this.storage = this.firebase.storage()\n      } catch (e) {}\n      try {\n        const sweetened = sweet(this.firebase.firestore)\n        this.firestore = sweetened.firestore\n        this.FieldValue = this.firebase.firestore.FieldValue\n        this.db = sweetened\n      } catch (e) {\n        console.log(e)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n}\n\nexport const fb = () => window._fb\n\nexport const db = () => window._fb.db\n\nexport const initFB = ({ set, conf, global }) =>\n  new Promise(async res => {\n    if (isNil(window)) {\n      res({ err: true, message: \"no window\", code: 1 })\n    } else {\n      let isFB = null\n      do {\n        isFB = await new Promise(res => {\n          setTimeout(() => {\n            if (isNil(window.firebase)) {\n              res({ err: true, message: \"no firebase\", code: 2 })\n            } else {\n              window._fb = new FB(conf)\n              if (xNil(global)) {\n                global.fb = window._fb\n                global.db = window._fb.db\n              }\n              if (xNil(set)) set(true, \"isFB\")\n              res(mergeLeft({ err: false, message: null, code: 0 }, window._fb))\n            }\n          }, 100)\n        })\n      } while (isNil(isFB))\n      res(isFB)\n    }\n  })\n"]},"metadata":{},"sourceType":"module"}