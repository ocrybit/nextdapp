{"ast":null,"code":"import { clone, mergeLeft, map, prop, is } from \"ramda\";\nimport setter from \"./setter\";\nimport { conf, global } from \"nd\";\n\nconst func = (arr = [], fn) => {\n  if (is(Function)(arr)) {\n    fn = arr;\n    arr = fn.props || [];\n  } else if (is(Array)(arr)) {\n    if (is(Function)(arr[1])) {\n      fn = arr[1];\n      arr = arr[0] || fn.props || [];\n    } else {\n      arr = arr || fn.props || [];\n    }\n  }\n\n  const _fn = () => {\n    const {\n      binder,\n      set,\n      get\n    } = setter(arr);\n    return _val => {\n      const args = {\n        global,\n        conf: conf,\n        val: _val || {},\n        set,\n        get,\n        props: map(prop(\"get\"))(binder)\n      };\n\n      const _fn = fn => val => fn(mergeLeft({\n        val: val,\n        fn: _fn,\n        binder: binder\n      }, args));\n\n      return fn(mergeLeft({\n        fn: _fn\n      }, args));\n    };\n  };\n\n  _fn.props = fn.props;\n  return _fn;\n};\n\nexport default func;","map":{"version":3,"sources":["/home/basque/hide/next-dapp/nd/core/func.js"],"names":["clone","mergeLeft","map","prop","is","setter","conf","global","func","arr","fn","Function","props","Array","_fn","binder","set","get","_val","args","val"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,EAAtC,QAAgD,OAAhD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,IAA7B;;AACA,MAAMC,IAAI,GAAG,CAACC,GAAG,GAAG,EAAP,EAAWC,EAAX,KAAkB;AAC7B,MAAIN,EAAE,CAACO,QAAD,CAAF,CAAaF,GAAb,CAAJ,EAAuB;AACrBC,IAAAA,EAAE,GAAGD,GAAL;AACAA,IAAAA,GAAG,GAAGC,EAAE,CAACE,KAAH,IAAY,EAAlB;AACD,GAHD,MAGO,IAAIR,EAAE,CAACS,KAAD,CAAF,CAAUJ,GAAV,CAAJ,EAAoB;AACzB,QAAIL,EAAE,CAACO,QAAD,CAAF,CAAaF,GAAG,CAAC,CAAD,CAAhB,CAAJ,EAA0B;AACxBC,MAAAA,EAAE,GAAGD,GAAG,CAAC,CAAD,CAAR;AACAA,MAAAA,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,IAAUC,EAAE,CAACE,KAAb,IAAsB,EAA5B;AACD,KAHD,MAGO;AACLH,MAAAA,GAAG,GAAGA,GAAG,IAAIC,EAAE,CAACE,KAAV,IAAmB,EAAzB;AACD;AACF;;AACD,QAAME,GAAG,GAAG,MAAM;AAChB,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,GAAV;AAAeC,MAAAA;AAAf,QAAuBZ,MAAM,CAACI,GAAD,CAAnC;AACA,WAAOS,IAAI,IAAI;AACb,YAAMC,IAAI,GAAG;AACXZ,QAAAA,MADW;AAEXD,QAAAA,IAAI,EAAEA,IAFK;AAGXc,QAAAA,GAAG,EAAEF,IAAI,IAAI,EAHF;AAIXF,QAAAA,GAJW;AAKXC,QAAAA,GALW;AAMXL,QAAAA,KAAK,EAAEV,GAAG,CAACC,IAAI,CAAC,KAAD,CAAL,CAAH,CAAiBY,MAAjB;AANI,OAAb;;AAQA,YAAMD,GAAG,GAAGJ,EAAE,IAAIU,GAAG,IACnBV,EAAE,CAACT,SAAS,CAAC;AAAEmB,QAAAA,GAAG,EAAEA,GAAP;AAAYV,QAAAA,EAAE,EAAEI,GAAhB;AAAqBC,QAAAA,MAAM,EAAEA;AAA7B,OAAD,EAAwCI,IAAxC,CAAV,CADJ;;AAEA,aAAOT,EAAE,CAACT,SAAS,CAAC;AAAES,QAAAA,EAAE,EAAEI;AAAN,OAAD,EAAcK,IAAd,CAAV,CAAT;AACD,KAZD;AAaD,GAfD;;AAgBAL,EAAAA,GAAG,CAACF,KAAJ,GAAYF,EAAE,CAACE,KAAf;AACA,SAAOE,GAAP;AACD,CA9BD;;AAgCA,eAAeN,IAAf","sourcesContent":["import { clone, mergeLeft, map, prop, is } from \"ramda\"\nimport setter from \"./setter\"\nimport { conf, global } from \"nd\"\nconst func = (arr = [], fn) => {\n  if (is(Function)(arr)) {\n    fn = arr\n    arr = fn.props || []\n  } else if (is(Array)(arr)) {\n    if (is(Function)(arr[1])) {\n      fn = arr[1]\n      arr = arr[0] || fn.props || []\n    } else {\n      arr = arr || fn.props || []\n    }\n  }\n  const _fn = () => {\n    const { binder, set, get } = setter(arr)\n    return _val => {\n      const args = {\n        global,\n        conf: conf,\n        val: _val || {},\n        set,\n        get,\n        props: map(prop(\"get\"))(binder)\n      }\n      const _fn = fn => val =>\n        fn(mergeLeft({ val: val, fn: _fn, binder: binder }, args))\n      return fn(mergeLeft({ fn: _fn }, args))\n    }\n  }\n  _fn.props = fn.props\n  return _fn\n}\n\nexport default func\n"]},"metadata":{},"sourceType":"module"}