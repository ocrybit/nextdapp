{"ast":null,"code":"import { is, propOr, apply, isNil, hasPath, pickBy, identity, mergeLeft, invertObj, curryN, includes } from \"ramda\";\nimport { xNil } from \"nd/util\";\nimport { initFB } from \"nd/fb\";\nimport { setCookie, parseCookies, destroyCookie } from \"nookies\";\nimport { ns } from \"nd\";\nconst $ = ns(\"account\");\n\nconst NodeRSA = require(\"node-rsa\");\n\nconst base64url = require(\"base64url\");\n\nconst sha256 = require(\"js-sha256\");\n\nconst shortid = require(\"shortid\");\n\nconst err = (fn, ctx) => async (...args) => {\n  let ret = null;\n  let err = null;\n\n  try {\n    ret = await fn.apply(ctx || this, args);\n  } catch (e) {\n    err = e;\n  }\n\n  return [err, ret];\n};\n\nconst logAlert = (obj, log, _alert_message) => {\n  if (xNil(obj)) {\n    if (xNil(log)) console.log(log);\n    if (xNil(alert)) alert(_alert_message);\n  }\n\n  return xNil(err);\n};\n\nlet logging = false;\nlet conf, steem_client;\nconst name_map = {\n  \"twitter.com\": \"twitter\",\n  \"facebook.com\": \"facebook\",\n  \"google.com\": \"google\",\n  \"github.com\": \"github\",\n  \"alis.to\": \"alis\"\n};\nconst reverse_name_map = invertObj(name_map);\nconst link_converter = {\n  \"twitter.com\": (_u, add) => mergeLeft({\n    username: add.username,\n    id: add.profile.id_str,\n    about: add.profile.description,\n    image: add.profile.profile_image_url_https.replace(/_normal/, \"\")\n  }, _u),\n  \"facebook.com\": (_u, add) => mergeLeft({\n    name: add.profile.name,\n    image: hasPath([\"profile\", \"picture\", \"data\", \"url\"])(add) ? add.profile.picture.data.url : undefined\n  }, _u),\n  \"google.com\": (_u, add) => mergeLeft({\n    name: add.profile.name,\n    image: add.profile.picture\n  }, _u),\n  \"github.com\": (_u, add) => mergeLeft({\n    username: add.username,\n    name: add.profile.name,\n    about: add.profile.bio\n  }, _u),\n  \"alis.to\": (_u, add) => mergeLeft({\n    name: add.user_display_name,\n    image: add.icon_image_url,\n    about: add.self_introduction,\n    username: add.user_id\n  }, _u)\n};\n\nconst userUpdate = async ({\n  u,\n  set,\n  global: {\n    db,\n    account_nodb\n  }\n}) => {\n  const user = isNil(u) ? null : account_nodb ? {\n    uid: u.uid,\n    name: u.displayName\n  } : await db.get(\"users\", u.uid);\n  logging = false;\n  set({\n    user: user,\n    user_init: true\n  });\n};\n\nexport const watchUser = async ({\n  val: {\n    nodb = false,\n    cb\n  },\n  set,\n  conf,\n  global\n}) => {\n  global.account_nodb = nodb;\n  initFB({\n    set,\n    global,\n    conf\n  }).then(fb => {\n    fb.firebase.auth().onAuthStateChanged(async u => {\n      if (!logging) await userUpdate({\n        u,\n        set,\n        global\n      });\n      if (is(Function)(cb)) cb(u);\n    });\n  });\n};\nwatchUser.props = [\"user\", \"user_init\"];\nexport const logout = async ({\n  val,\n  global: {\n    fb\n  }\n}) => {\n  const auth = await fb.firebase.auth();\n  const [error] = await err(auth.signOut, auth)();\n  logAlert(error, error, \"something went wrong\");\n  return [error];\n};\nconst user_fields = [\"name\", \"image\", \"about\", \"uid\", \"username\", \"id\"];\n\nconst _login = async ({\n  user,\n  provider,\n  set,\n  _add = {},\n  global,\n  val: {\n    nodb\n  }\n}) => {\n  logging = true;\n\n  if (hasPath([\"user\", \"uid\"])(user)) {\n    await global.db.tx(\"users\", user.user.uid, async ({\n      data,\n      t,\n      ref\n    }) => {\n      let _u = data || {\n        uid: user.user.uid,\n        status: \"active\"\n      };\n\n      _u.links = propOr({}, \"links\")(_u);\n      const add = mergeLeft(user.additionalUserInfo, _add);\n\n      for (let v of user.user.providerData) {\n        if (xNil(link_converter[v.providerId])) {\n          _u.links[name_map[v.providerId]] = {\n            id: v.uid,\n            name: v.displayName,\n            image: v.photoURL\n          };\n\n          if (provider === v.providerId && xNil(add)) {\n            _u.links[name_map[v.providerId]] = link_converter[v.providerId](_u.links[name_map[v.providerId]], add);\n          }\n\n          _u.links[name_map[v.providerId]] = pickBy(identity)(_u.links[name_map[v.providerId]]);\n\n          if (provider === v.providerId && xNil(add)) {\n            for (let k of user_fields) {\n              if ((isNil(_u[k]) || hasPath([\"profile_update\", k])) && xNil(_u.links[name_map[v.providerId]][k])) {\n                _u[k] = _u.links[name_map[v.providerId]][k];\n              }\n            }\n          }\n        }\n      }\n\n      _u = pickBy(identity)(_u);\n      if (nodb !== true) await global.db.upsert(_u, \"users\", _u.uid);\n    });\n    await userUpdate({\n      u: user.user,\n      set,\n      global\n    });\n  }\n};\n\nconst getProvider = ({\n  provider,\n  fb\n}) => {\n  return new fb.firebase.auth[`${provider[0].toUpperCase()}${provider.slice(1)}AuthProvider`]();\n};\n\nconst getData = async (db, conf, url) => {\n  const toRSAPublic = key => `-----BEGIN PUBLIC KEY-----\\n${key}\\n-----END PUBLIC KEY-----`;\n\n  const toRSAPrivate = key => `-----BEGIN RSA PRIVATE KEY-----\\n${key}\\n-----END RSA PRIVATE KEY-----`;\n\n  function fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n      return \"%\" + c.charCodeAt(0).toString(16);\n    });\n  }\n\n  const key = new NodeRSA({\n    b: 512\n  });\n  const key2 = new NodeRSA(toRSAPublic(conf.rsa.public));\n  const pub = key.exportKey(\"public\");\n  const text = \"Hello RSA!\";\n  const encrypted = key2.encrypt(pub, \"base64\");\n  const public_key = key.exportKey(\"public\");\n  const id = shortid.generate();\n  const encrypted_id = key2.encrypt(id, \"base64\");\n  db.set({\n    date: Date.now(),\n    public_key: encrypted\n  }, \"crypt\", id);\n\n  const _getData = async url => {\n    return await new Promise(async (res, rej) => {\n      let once = false;\n      let to = null;\n      let ret = {};\n      const unsubscribe = await db.on(\"crypt\", id, async doc => {\n        if (doc !== null && xNil(doc.value)) {\n          once = true;\n          ret.data = JSON.parse(key.decrypt(doc.value, \"utf8\"));\n          clearTimeout(to);\n          await unsubscribe();\n\n          if (xNil(ret.response)) {\n            res(ret);\n          }\n        }\n      });\n      to = setTimeout(async () => {\n        try {\n          await unsubscribe();\n\n          if (xNil(ret.response)) {\n            res(ret);\n          }\n        } catch (e) {}\n      }, 20000);\n      ret.response = await fetch(`${url}&crypt_id=${encodeURIComponent(encrypted_id)}`).then(response => response.json());\n      console.log(ret.response);\n\n      if (xNil(ret.data)) {\n        res(ret);\n      }\n    });\n  };\n\n  return await _getData(url);\n};\n\nconst login_with = {\n  alis: async ({\n    conf\n  }) => {\n    const code_verifier = get_code_verifier();\n    const code_challenge = get_code_challenge(code_verifier);\n    const purl = `https://alis.to/oauth-authenticate?client_id=${conf.alis.client_id}&redirect_uri=${encodeURIComponent(conf.alis.redirect_uri)}&scope=write&code_challenge=${code_challenge}`;\n    setCookie(null, \"alis_verifier\", code_verifier, {\n      path: \"/\"\n    });\n    window.location.href = purl;\n  }\n};\nexport const login = async ({\n  val: {\n    provider,\n    nodb = false\n  },\n  set,\n  props,\n  conf,\n  global\n}) => {\n  if (xNil(login_with[provider])) {\n    return await login_with[provider]({\n      set,\n      props,\n      conf,\n      global,\n      val: {\n        nodb\n      }\n    });\n  }\n\n  const _provider = getProvider({\n    provider: provider,\n    fb: global.fb\n  });\n\n  const auth = await global.fb.firebase.auth();\n  const [error, user] = await err(auth.signInWithPopup, auth)(_provider);\n\n  if (xNil(error)) {\n    alert(\"something went wrong\");\n  } else {\n    await _login({\n      user,\n      provider: reverse_name_map[provider],\n      set,\n      global,\n      val: {\n        nodb\n      }\n    });\n  }\n\n  return [error, user];\n};\n\nconst _login_with = async ({\n  set,\n  props,\n  login_url,\n  provider,\n  global: {\n    fb,\n    db\n  },\n  val: {\n    nodb\n  },\n  conf\n}) => {\n  if (hasPath([\"value\", \"user\", \"uid\"])(props)) {\n    login_url += `&uid=${props.user.uid}`;\n  }\n\n  const _res = await getData(db, conf, login_url);\n\n  if (hasPath([\"response\", \"err\"])(_res) && xNil(_res.response.err)) {\n    alert(_res.response.err);\n    return;\n  }\n\n  if (hasPath([\"data\", \"err\"])(_res) && xNil(_res.data.err)) {\n    alert(_res.data.err);\n    return;\n  }\n\n  if (hasPath([\"data\", \"user\"])(_res) && xNil(_res.data.user)) {\n    const auth = await fb.firebase.auth();\n    const [error, user] = await err(auth.signInWithCustomToken, auth)(_res.data.token);\n\n    if (xNil(error)) {\n      alert(\"something went wrong\");\n      return;\n    }\n\n    user.user.providerData.push({\n      providerId: reverse_name_map[provider],\n      uid: user.uid\n    });\n\n    _login({\n      global: {\n        db,\n        fb\n      },\n      user,\n      provider: reverse_name_map[provider],\n      set,\n      _add: _res.data.user,\n      val: {\n        nodb\n      }\n    });\n  }\n\n  return;\n};\n\nexport const deleteAccount = async ({\n  val: {\n    user\n  },\n  set,\n  global: {\n    db,\n    fb,\n    account_nodb\n  }\n}) => {\n  if (account_nodb !== true) {\n    await db.tx(\"users\", user.uid, async ({\n      t,\n      ref,\n      data\n    }) => {\n      for (let l in data.links || {}) {\n        if (includes(l)([\"steem\", \"alis\"])) {\n          await db.delete(`usermap_${l}`, data.links[l].username);\n        }\n      }\n\n      return await t.update(ref, {\n        status: \"deleted\"\n      });\n    });\n  }\n\n  let _user = fb.firebase.auth().currentUser;\n  await _user.delete();\n};\n\nconst checkUser = async props => {\n  return await new Promise(res => {\n    setInterval(async () => {\n      if (props.user_init === false) {\n        res(await checkUser(props));\n      } else {\n        res(props.user);\n      }\n    }, 500);\n  });\n};\n\nfunction get_code_challenge(str) {\n  const hash = sha256.arrayBuffer(str);\n  return base64url(hash);\n}\n\nfunction get_code_verifier() {\n  const buf = Buffer.alloc(32);\n\n  for (let i = 0; i < buf.length; i++) {\n    const random_num = Math.floor(Math.random() * 256);\n    buf.writeUInt8(random_num, i);\n  }\n\n  return base64url(buf);\n}\n\nexport const check_alis = async ({\n  val: {\n    router\n  },\n  props,\n  set,\n  global,\n  conf\n}) => {\n  const code = router.query.code;\n  if (isNil(code)) return;\n  const cookies = parseCookies();\n  const alis_verifier = cookies.alis_verifier;\n  let user = await checkUser(props);\n  let login_url = `/api/${$()}/alis-oauth?code=${code}&verifier=${cookies.alis_verifier}`;\n  console.log(login_url);\n  await _login_with({\n    conf,\n    global,\n    login_url,\n    set,\n    props,\n    provider: \"alis\",\n    val: {\n      nodb: false\n    }\n  });\n  router.replace(router.pathname, router.pathname, {\n    shallow: true\n  });\n};","map":{"version":3,"sources":["/home/basque/hide/next-dapp/nd/account/account.js"],"names":["is","propOr","apply","isNil","hasPath","pickBy","identity","mergeLeft","invertObj","curryN","includes","xNil","initFB","setCookie","parseCookies","destroyCookie","ns","$","NodeRSA","require","base64url","sha256","shortid","err","fn","ctx","args","ret","e","logAlert","obj","log","_alert_message","console","alert","logging","conf","steem_client","name_map","reverse_name_map","link_converter","_u","add","username","id","profile","id_str","about","description","image","profile_image_url_https","replace","name","picture","data","url","undefined","bio","user_display_name","icon_image_url","self_introduction","user_id","userUpdate","u","set","global","db","account_nodb","user","uid","displayName","get","user_init","watchUser","val","nodb","cb","then","fb","firebase","auth","onAuthStateChanged","Function","props","logout","error","signOut","user_fields","_login","provider","_add","tx","t","ref","status","links","additionalUserInfo","v","providerData","providerId","photoURL","k","upsert","getProvider","toUpperCase","slice","getData","toRSAPublic","key","toRSAPrivate","fixedEncodeURIComponent","str","encodeURIComponent","c","charCodeAt","toString","b","key2","rsa","public","pub","exportKey","text","encrypted","encrypt","public_key","generate","encrypted_id","date","Date","now","_getData","Promise","res","rej","once","to","unsubscribe","on","doc","value","JSON","parse","decrypt","clearTimeout","response","setTimeout","fetch","json","login_with","alis","code_verifier","get_code_verifier","code_challenge","get_code_challenge","purl","client_id","redirect_uri","path","window","location","href","login","_provider","signInWithPopup","_login_with","login_url","_res","signInWithCustomToken","token","push","deleteAccount","l","delete","update","_user","currentUser","checkUser","setInterval","hash","arrayBuffer","buf","Buffer","alloc","i","length","random_num","Math","floor","random","writeUInt8","check_alis","router","code","query","cookies","alis_verifier","pathname","shallow"],"mappings":"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","sourcesContent":["import {\n  is,\n  propOr,\n  apply,\n  isNil,\n  hasPath,\n  pickBy,\n  identity,\n  mergeLeft,\n  invertObj,\n  curryN,\n  includes\n} from \"ramda\"\n\nimport { xNil } from \"nd/util\"\nimport { initFB } from \"nd/fb\"\nimport { setCookie, parseCookies, destroyCookie } from \"nookies\"\nimport { ns } from \"nd\"\nconst $ = ns(\"account\")\n\nconst NodeRSA = require(\"node-rsa\")\nconst base64url = require(\"base64url\")\nconst sha256 = require(\"js-sha256\")\nconst shortid = require(\"shortid\")\nconst err = (fn, ctx) => async (...args) => {\n  let ret = null\n  let err = null\n  try {\n    ret = await fn.apply(ctx || this, args)\n  } catch (e) {\n    err = e\n  }\n  return [err, ret]\n}\n\nconst logAlert = (obj, log, _alert_message) => {\n  if (xNil(obj)) {\n    if (xNil(log)) console.log(log)\n    if (xNil(alert)) alert(_alert_message)\n  }\n  return xNil(err)\n}\n\nlet logging = false\nlet conf, steem_client\n\nconst name_map = {\n  \"twitter.com\": \"twitter\",\n  \"facebook.com\": \"facebook\",\n  \"google.com\": \"google\",\n  \"github.com\": \"github\",\n  \"alis.to\": \"alis\"\n}\n\nconst reverse_name_map = invertObj(name_map)\n\nconst link_converter = {\n  \"twitter.com\": (_u, add) =>\n    mergeLeft(\n      {\n        username: add.username,\n        id: add.profile.id_str,\n        about: add.profile.description,\n        image: add.profile.profile_image_url_https.replace(/_normal/, \"\")\n      },\n      _u\n    ),\n  \"facebook.com\": (_u, add) =>\n    mergeLeft(\n      {\n        name: add.profile.name,\n        image: hasPath([\"profile\", \"picture\", \"data\", \"url\"])(add)\n          ? add.profile.picture.data.url\n          : undefined\n      },\n      _u\n    ),\n  \"google.com\": (_u, add) =>\n    mergeLeft({ name: add.profile.name, image: add.profile.picture }, _u),\n  \"github.com\": (_u, add) =>\n    mergeLeft(\n      {\n        username: add.username,\n        name: add.profile.name,\n        about: add.profile.bio\n      },\n      _u\n    ),\n  \"alis.to\": (_u, add) =>\n    mergeLeft(\n      {\n        name: add.user_display_name,\n        image: add.icon_image_url,\n        about: add.self_introduction,\n        username: add.user_id\n      },\n      _u\n    )\n}\n\nconst userUpdate = async ({ u, set, global: { db, account_nodb } }) => {\n  const user = isNil(u)\n    ? null\n    : account_nodb\n      ? { uid: u.uid, name: u.displayName }\n      : await db.get(\"users\", u.uid)\n  logging = false\n  set({ user: user, user_init: true })\n}\n\nexport const watchUser = async ({\n  val: { nodb = false, cb },\n  set,\n  conf,\n  global\n}) => {\n  global.account_nodb = nodb\n  initFB({ set, global, conf }).then(fb => {\n    fb.firebase.auth().onAuthStateChanged(async u => {\n      if (!logging) await userUpdate({ u, set, global })\n      if (is(Function)(cb)) cb(u)\n    })\n  })\n}\nwatchUser.props = [\"user\", \"user_init\"]\n\nexport const logout = async ({ val, global: { fb } }) => {\n  const auth = await fb.firebase.auth()\n  const [error] = await err(auth.signOut, auth)()\n  logAlert(error, error, \"something went wrong\")\n  return [error]\n}\n\nconst user_fields = [\"name\", \"image\", \"about\", \"uid\", \"username\", \"id\"]\n\nconst _login = async ({\n  user,\n  provider,\n  set,\n  _add = {},\n  global,\n  val: { nodb }\n}) => {\n  logging = true\n  if (hasPath([\"user\", \"uid\"])(user)) {\n    await global.db.tx(\"users\", user.user.uid, async ({ data, t, ref }) => {\n      let _u = data || { uid: user.user.uid, status: \"active\" }\n      _u.links = propOr({}, \"links\")(_u)\n      const add = mergeLeft(user.additionalUserInfo, _add)\n      for (let v of user.user.providerData) {\n        if (xNil(link_converter[v.providerId])) {\n          _u.links[name_map[v.providerId]] = {\n            id: v.uid,\n            name: v.displayName,\n            image: v.photoURL\n          }\n          if (provider === v.providerId && xNil(add)) {\n            _u.links[name_map[v.providerId]] = link_converter[v.providerId](\n              _u.links[name_map[v.providerId]],\n              add\n            )\n          }\n          _u.links[name_map[v.providerId]] = pickBy(identity)(\n            _u.links[name_map[v.providerId]]\n          )\n          if (provider === v.providerId && xNil(add)) {\n            for (let k of user_fields) {\n              if (\n                (isNil(_u[k]) || hasPath([\"profile_update\", k])) &&\n                xNil(_u.links[name_map[v.providerId]][k])\n              ) {\n                _u[k] = _u.links[name_map[v.providerId]][k]\n              }\n            }\n          }\n        }\n      }\n      _u = pickBy(identity)(_u)\n      if (nodb !== true) await global.db.upsert(_u, \"users\", _u.uid)\n    })\n    await userUpdate({ u: user.user, set, global })\n  }\n}\n\nconst getProvider = ({ provider, fb }) => {\n  return new fb.firebase.auth[\n    `${provider[0].toUpperCase()}${provider.slice(1)}AuthProvider`\n  ]()\n}\n\nconst getData = async (db, conf, url) => {\n  const toRSAPublic = key =>\n    `-----BEGIN PUBLIC KEY-----\\n${key}\\n-----END PUBLIC KEY-----`\n  const toRSAPrivate = key =>\n    `-----BEGIN RSA PRIVATE KEY-----\\n${key}\\n-----END RSA PRIVATE KEY-----`\n  function fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n      return \"%\" + c.charCodeAt(0).toString(16)\n    })\n  }\n  const key = new NodeRSA({ b: 512 })\n  const key2 = new NodeRSA(toRSAPublic(conf.rsa.public))\n  const pub = key.exportKey(\"public\")\n  const text = \"Hello RSA!\"\n  const encrypted = key2.encrypt(pub, \"base64\")\n  const public_key = key.exportKey(\"public\")\n  const id = shortid.generate()\n  const encrypted_id = key2.encrypt(id, \"base64\")\n  db.set({ date: Date.now(), public_key: encrypted }, \"crypt\", id)\n  const _getData = async url => {\n    return await new Promise(async (res, rej) => {\n      let once = false\n      let to = null\n      let ret = {}\n      const unsubscribe = await db.on(\"crypt\", id, async doc => {\n        if (doc !== null && xNil(doc.value)) {\n          once = true\n          ret.data = JSON.parse(key.decrypt(doc.value, \"utf8\"))\n          clearTimeout(to)\n          await unsubscribe()\n          if (xNil(ret.response)) {\n            res(ret)\n          }\n        }\n      })\n      to = setTimeout(async () => {\n        try {\n          await unsubscribe()\n          if (xNil(ret.response)) {\n            res(ret)\n          }\n        } catch (e) {}\n      }, 20000)\n      ret.response = await fetch(\n        `${url}&crypt_id=${encodeURIComponent(encrypted_id)}`\n      ).then(response => response.json())\n      console.log(ret.response)\n      if (xNil(ret.data)) {\n        res(ret)\n      }\n    })\n  }\n  return await _getData(url)\n}\n\nconst login_with = {\n  alis: async ({ conf }) => {\n    const code_verifier = get_code_verifier()\n    const code_challenge = get_code_challenge(code_verifier)\n    const purl = `https://alis.to/oauth-authenticate?client_id=${\n      conf.alis.client_id\n    }&redirect_uri=${encodeURIComponent(\n      conf.alis.redirect_uri\n    )}&scope=write&code_challenge=${code_challenge}`\n    setCookie(null, \"alis_verifier\", code_verifier, { path: \"/\" })\n    window.location.href = purl\n  }\n}\n\nexport const login = async ({\n  val: { provider, nodb = false },\n  set,\n  props,\n  conf,\n  global\n}) => {\n  if (xNil(login_with[provider])) {\n    return await login_with[provider]({\n      set,\n      props,\n      conf,\n      global,\n      val: { nodb }\n    })\n  }\n  const _provider = getProvider({ provider: provider, fb: global.fb })\n  const auth = await global.fb.firebase.auth()\n  const [error, user] = await err(auth.signInWithPopup, auth)(_provider)\n  if (xNil(error)) {\n    alert(\"something went wrong\")\n  } else {\n    await _login({\n      user,\n      provider: reverse_name_map[provider],\n      set,\n      global,\n      val: { nodb }\n    })\n  }\n  return [error, user]\n}\n\nconst _login_with = async ({\n  set,\n  props,\n  login_url,\n  provider,\n  global: { fb, db },\n  val: { nodb },\n  conf\n}) => {\n  if (hasPath([\"value\", \"user\", \"uid\"])(props)) {\n    login_url += `&uid=${props.user.uid}`\n  }\n  const _res = await getData(db, conf, login_url)\n  if (hasPath([\"response\", \"err\"])(_res) && xNil(_res.response.err)) {\n    alert(_res.response.err)\n    return\n  }\n  if (hasPath([\"data\", \"err\"])(_res) && xNil(_res.data.err)) {\n    alert(_res.data.err)\n    return\n  }\n  if (hasPath([\"data\", \"user\"])(_res) && xNil(_res.data.user)) {\n    const auth = await fb.firebase.auth()\n    const [error, user] = await err(auth.signInWithCustomToken, auth)(\n      _res.data.token\n    )\n    if (xNil(error)) {\n      alert(\"something went wrong\")\n      return\n    }\n    user.user.providerData.push({\n      providerId: reverse_name_map[provider],\n      uid: user.uid\n    })\n    _login({\n      global: { db, fb },\n      user,\n      provider: reverse_name_map[provider],\n      set,\n      _add: _res.data.user,\n      val: { nodb }\n    })\n  }\n  return\n}\n\nexport const deleteAccount = async ({\n  val: { user },\n  set,\n  global: { db, fb, account_nodb }\n}) => {\n  if (account_nodb !== true) {\n    await db.tx(\"users\", user.uid, async ({ t, ref, data }) => {\n      for (let l in data.links || {}) {\n        if (includes(l)([\"steem\", \"alis\"])) {\n          await db.delete(`usermap_${l}`, data.links[l].username)\n        }\n      }\n      return await t.update(ref, { status: \"deleted\" })\n    })\n  }\n  let _user = fb.firebase.auth().currentUser\n  await _user.delete()\n}\n\nconst checkUser = async props => {\n  return await new Promise(res => {\n    setInterval(async () => {\n      if (props.user_init === false) {\n        res(await checkUser(props))\n      } else {\n        res(props.user)\n      }\n    }, 500)\n  })\n}\n\nfunction get_code_challenge(str) {\n  const hash = sha256.arrayBuffer(str)\n  return base64url(hash)\n}\n\nfunction get_code_verifier() {\n  const buf = Buffer.alloc(32)\n  for (let i = 0; i < buf.length; i++) {\n    const random_num = Math.floor(Math.random() * 256)\n    buf.writeUInt8(random_num, i)\n  }\n  return base64url(buf)\n}\n\nexport const check_alis = async ({\n  val: { router },\n  props,\n  set,\n  global,\n  conf\n}) => {\n  const code = router.query.code\n  if (isNil(code)) return\n  const cookies = parseCookies()\n  const alis_verifier = cookies.alis_verifier\n  let user = await checkUser(props)\n  let login_url = `/api/${$()}/alis-oauth?code=${code}&verifier=${\n    cookies.alis_verifier\n  }`\n  console.log(login_url)\n  await _login_with({\n    conf,\n    global,\n    login_url,\n    set,\n    props,\n    provider: \"alis\",\n    val: { nodb: false }\n  })\n  router.replace(router.pathname, router.pathname, { shallow: true })\n}\n"]},"metadata":{},"sourceType":"module"}