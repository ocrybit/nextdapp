{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { hasPath, complement, isNil } from \"ramda\";\nvar xNil = complement(isNil);\n\nvar _require = require(\"url\"),\n    parse = _require.parse;\n\nrequire(\"isomorphic-fetch\");\n\nvar toParams = function toParams(params) {\n  return Object.keys(params).map(function (key) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n  }).join(\"&\");\n};\n\nimport conf from \"nd/conf\";\nimport ns from \"nd/core/ns\";\nvar $ = ns(\"account\");\n\nvar NodeRSA = require(\"node-rsa\");\n\nvar toRSAPublic = function toRSAPublic(key) {\n  return \"-----BEGIN PUBLIC KEY-----\\n\".concat(key, \"\\n-----END PUBLIC KEY-----\");\n};\n\nvar toRSAPrivate = function toRSAPrivate(key) {\n  return \"-----BEGIN RSA PRIVATE KEY-----\\n\".concat(key, \"\\n-----END RSA PRIVATE KEY-----\");\n};\n\nexport default /*#__PURE__*/(function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var key, client_id, base64, _parse, query, r, op, user, json_str, obj, sign, base_url, href, reg, json_str_reg, verify, json;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            key = new NodeRSA(toRSAPublic(conf.rsa[\"public\"]));\n            key.importKey(toRSAPrivate(process.env.RSA_PRIVATE.replace(/\\\\n/g, \"\\n\")), \"private\");\n            client_id = conf.alis.client_id;\n            base64 = new Buffer(client_id + \":\" + process.env.ALIS_CLIENT_SECRET).toString(\"base64\");\n            res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n            res.setHeader(\"Content-Type\", \"application/json\");\n            _parse = parse(req.url, true), query = _parse.query;\n            _context.prev = 7;\n            _context.next = 10;\n            return fetch(\"https://alis.to/oauth2/token\", {\n              headers: {\n                Authorization: \"Basic \" + base64,\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n              },\n              method: \"POST\",\n              body: toParams({\n                grant_type: \"authorization_code\",\n                code: query.code,\n                redirect_uri: conf.alis.redirect_uri,\n                code_verifier: query.verifier\n              })\n            }).then(function (r) {\n              return r.json();\n            });\n\n          case 10:\n            r = _context.sent;\n            console.log(r);\n\n            if (!xNil(r.error_message)) {\n              _context.next = 16;\n              break;\n            }\n\n            res.end(JSON.stringify(r));\n            _context.next = 43;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            op = {\n              headers: {\n                Authorization: r.access_token,\n                \"Content-Type\": \"application/json; charset=utf-8\"\n              }\n            };\n            _context.t0 = JSON;\n            _context.t1 = unescape;\n            _context.next = 22;\n            return fetch(\"https://alis.to/oauth2api/me/info\", op).then(function (r) {\n              return r.text();\n            });\n\n          case 22:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            user = _context.t0.parse.call(_context.t0, _context.t3);\n            json_str = JSON.stringify({\n              uid: query.uid,\n              token: r.access_token,\n              refresh: r.refresh_token,\n              user: user,\n              crypt_id: query.crypt_id\n            });\n            obj = key.encrypt(json_str, \"base64\");\n            sign = key.sign(json_str, \"base64\", \"utf8\");\n            base_url = hasPath([\"functions\", \"base_url\"])(conf) ? conf.functions.base_url : \"https://\".concat(conf.fb.region, \"-\").concat(conf.fb.id, \".cloudfunctions.net\");\n            href = \"\".concat(base_url, \"/\").concat($(\"login\"), \"?data=\").concat(encodeURIComponent(obj), \"&signature=\").concat(encodeURIComponent(sign));\n            _context.next = 32;\n            return fetch(href).then(function (r) {\n              return r.json();\n            });\n\n          case 32:\n            reg = _context.sent;\n            json_str_reg = key.decrypt(reg.data, \"utf8\");\n            verify = key.verify(json_str_reg, reg.signature, \"utf8\", \"base64\");\n            json = JSON.parse(json_str_reg);\n\n            if (verify) {\n              res.end(JSON.stringify(json));\n            } else {\n              res.end(JSON.stringify({\n                err: \"signature invalid\"\n              }));\n            }\n\n            _context.next = 43;\n            break;\n\n          case 39:\n            _context.prev = 39;\n            _context.t4 = _context[\"catch\"](16);\n            console.log(_context.t4);\n            res.end(JSON.stringify(_context.t4));\n\n          case 43:\n            _context.next = 48;\n            break;\n\n          case 45:\n            _context.prev = 45;\n            _context.t5 = _context[\"catch\"](7);\n            res.send({\n              err: \"unknown err\"\n            });\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 45], [16, 39]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n})();","map":{"version":3,"sources":["/home/basque/hide/next-dapp/nd/account/api/alis-oauth.js"],"names":["hasPath","complement","isNil","xNil","require","parse","toParams","params","Object","keys","map","key","encodeURIComponent","join","conf","ns","$","NodeRSA","toRSAPublic","toRSAPrivate","req","res","rsa","importKey","process","env","RSA_PRIVATE","replace","client_id","alis","base64","Buffer","ALIS_CLIENT_SECRET","toString","setHeader","url","query","fetch","headers","Authorization","method","body","grant_type","code","redirect_uri","code_verifier","verifier","then","r","json","console","log","error_message","end","JSON","stringify","op","access_token","unescape","text","user","json_str","uid","token","refresh","refresh_token","crypt_id","obj","encrypt","sign","base_url","functions","fb","region","id","href","reg","json_str_reg","decrypt","data","verify","signature","err","send"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,UAAlB,EAA8BC,KAA9B,QAA2C,OAA3C;AACA,IAAMC,IAAI,GAAGF,UAAU,CAACC,KAAD,CAAvB;;eACkBE,OAAO,CAAC,KAAD,C;IAAjBC,K,YAAAA,K;;AACRD,OAAO,CAAC,kBAAD,CAAP;;AACA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAAAC,MAAM;AAAA,SACrBC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EACGG,GADH,CACO,UAAAC,GAAG,EAAI;AACV,WAAOC,kBAAkB,CAACD,GAAD,CAAlB,GAA0B,GAA1B,GAAgCC,kBAAkB,CAACL,MAAM,CAACI,GAAD,CAAP,CAAzD;AACD,GAHH,EAIGE,IAJH,CAIQ,GAJR,CADqB;AAAA,CAAvB;;AAOA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,IAAMC,CAAC,GAAGD,EAAE,CAAC,SAAD,CAAZ;;AACA,IAAME,OAAO,GAAGb,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMc,WAAW,GAAG,SAAdA,WAAc,CAAAP,GAAG;AAAA,+CACUA,GADV;AAAA,CAAvB;;AAEA,IAAMQ,YAAY,GAAG,SAAfA,YAAe,CAAAR,GAAG;AAAA,oDACcA,GADd;AAAA,CAAxB;;AAEA;AAAA,sEAAe,iBAAOS,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPV,YAAAA,GADO,GACD,IAAIM,OAAJ,CAAYC,WAAW,CAACJ,IAAI,CAACQ,GAAL,UAAD,CAAvB,CADC;AAEbX,YAAAA,GAAG,CAACY,SAAJ,CACEJ,YAAY,CAACK,OAAO,CAACC,GAAR,CAAYC,WAAZ,CAAwBC,OAAxB,CAAgC,MAAhC,EAAwC,IAAxC,CAAD,CADd,EAEE,SAFF;AAIQC,YAAAA,SANK,GAMSd,IAAI,CAACe,IANd,CAMLD,SANK;AAOPE,YAAAA,MAPO,GAOE,IAAIC,MAAJ,CACbH,SAAS,GAAG,GAAZ,GAAkBJ,OAAO,CAACC,GAAR,CAAYO,kBADjB,EAEbC,QAFa,CAEJ,QAFI,CAPF;AAUbZ,YAAAA,GAAG,CAACa,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAb,YAAAA,GAAG,CAACa,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AAXa,qBAYK7B,KAAK,CAACe,GAAG,CAACe,GAAL,EAAU,IAAV,CAZV,EAYLC,KAZK,UAYLA,KAZK;AAAA;AAAA;AAAA,mBAcKC,KAAK,CAAC,8BAAD,EAAiC;AACpDC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,EAAE,WAAWT,MADnB;AAEP,gCAAgB;AAFT,eAD2C;AAKpDU,cAAAA,MAAM,EAAE,MAL4C;AAMpDC,cAAAA,IAAI,EAAEnC,QAAQ,CAAC;AACboC,gBAAAA,UAAU,EAAE,oBADC;AAEbC,gBAAAA,IAAI,EAAEP,KAAK,CAACO,IAFC;AAGbC,gBAAAA,YAAY,EAAE9B,IAAI,CAACe,IAAL,CAAUe,YAHX;AAIbC,gBAAAA,aAAa,EAAET,KAAK,CAACU;AAJR,eAAD;AANsC,aAAjC,CAAL,CAYbC,IAZa,CAYR,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,aAZO,CAdL;;AAAA;AAcLD,YAAAA,CAdK;AA2BXE,YAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;;AA3BW,iBA4BP7C,IAAI,CAAC6C,CAAC,CAACI,aAAH,CA5BG;AAAA;AAAA;AAAA;;AA6BT/B,YAAAA,GAAG,CAACgC,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeP,CAAf,CAAR;AA7BS;AAAA;;AAAA;AAAA;AAgCHQ,YAAAA,EAhCG,GAgCE;AACPlB,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,EAAES,CAAC,CAACS,YADV;AAEP,gCAAgB;AAFT;AADF,aAhCF;AAAA,0BAsCIH,IAtCJ;AAAA,0BAuCLI,QAvCK;AAAA;AAAA,mBAwCGrB,KAAK,CAAC,mCAAD,EAAsCmB,EAAtC,CAAL,CAA+CT,IAA/C,CAAoD,UAAAC,CAAC;AAAA,qBACzDA,CAAC,CAACW,IAAF,EADyD;AAAA,aAArD,CAxCH;;AAAA;AAAA;AAAA;AAsCHC,YAAAA,IAtCG,eAsCSvD,KAtCT;AA6CDwD,YAAAA,QA7CC,GA6CUP,IAAI,CAACC,SAAL,CAAe;AAC9BO,cAAAA,GAAG,EAAE1B,KAAK,CAAC0B,GADmB;AAE9BC,cAAAA,KAAK,EAAEf,CAAC,CAACS,YAFqB;AAG9BO,cAAAA,OAAO,EAAEhB,CAAC,CAACiB,aAHmB;AAI9BL,cAAAA,IAAI,EAAEA,IAJwB;AAK9BM,cAAAA,QAAQ,EAAE9B,KAAK,CAAC8B;AALc,aAAf,CA7CV;AAoDDC,YAAAA,GApDC,GAoDKxD,GAAG,CAACyD,OAAJ,CAAYP,QAAZ,EAAsB,QAAtB,CApDL;AAqDDQ,YAAAA,IArDC,GAqDM1D,GAAG,CAAC0D,IAAJ,CAASR,QAAT,EAAmB,QAAnB,EAA6B,MAA7B,CArDN;AAsDDS,YAAAA,QAtDC,GAsDUtE,OAAO,CAAC,CAAC,WAAD,EAAc,UAAd,CAAD,CAAP,CAAmCc,IAAnC,IACbA,IAAI,CAACyD,SAAL,CAAeD,QADF,qBAEFxD,IAAI,CAAC0D,EAAL,CAAQC,MAFN,cAEgB3D,IAAI,CAAC0D,EAAL,CAAQE,EAFxB,wBAtDV;AAyDDC,YAAAA,IAzDC,aAyDSL,QAzDT,cAyDqBtD,CAAC,CAAC,OAAD,CAzDtB,mBAyDwCJ,kBAAkB,CAC/DuD,GAD+D,CAzD1D,wBA2DQvD,kBAAkB,CAACyD,IAAD,CA3D1B;AAAA;AAAA,mBA4DWhC,KAAK,CAACsC,IAAD,CAAL,CAAY5B,IAAZ,CAAiB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,aAAlB,CA5DX;;AAAA;AA4DD2B,YAAAA,GA5DC;AA6DDC,YAAAA,YA7DC,GA6DclE,GAAG,CAACmE,OAAJ,CAAYF,GAAG,CAACG,IAAhB,EAAsB,MAAtB,CA7Dd;AA8DDC,YAAAA,MA9DC,GA8DQrE,GAAG,CAACqE,MAAJ,CAAWH,YAAX,EAAyBD,GAAG,CAACK,SAA7B,EAAwC,MAAxC,EAAgD,QAAhD,CA9DR;AA+DDhC,YAAAA,IA/DC,GA+DMK,IAAI,CAACjD,KAAL,CAAWwE,YAAX,CA/DN;;AAgEP,gBAAIG,MAAJ,EAAY;AACV3D,cAAAA,GAAG,CAACgC,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAR;AACD,aAFD,MAEO;AACL5B,cAAAA,GAAG,CAACgC,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAE2B,gBAAAA,GAAG,EAAE;AAAP,eAAf,CAAR;AACD;;AApEM;AAAA;;AAAA;AAAA;AAAA;AAsEPhC,YAAAA,OAAO,CAACC,GAAR;AACA9B,YAAAA,GAAG,CAACgC,GAAJ,CAAQC,IAAI,CAACC,SAAL,aAAR;;AAvEO;AAAA;AAAA;;AAAA;AAAA;AAAA;AA2EXlC,YAAAA,GAAG,CAAC8D,IAAJ,CAAS;AAAED,cAAAA,GAAG,EAAE;AAAP,aAAT;;AA3EW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { hasPath, complement, isNil } from \"ramda\"\nconst xNil = complement(isNil)\nconst { parse } = require(\"url\")\nrequire(\"isomorphic-fetch\")\nconst toParams = params =>\n  Object.keys(params)\n    .map(key => {\n      return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key])\n    })\n    .join(\"&\")\n\nimport conf from \"nd/conf\"\nimport ns from \"nd/core/ns\"\nconst $ = ns(\"account\")\nconst NodeRSA = require(\"node-rsa\")\nconst toRSAPublic = key =>\n  `-----BEGIN PUBLIC KEY-----\\n${key}\\n-----END PUBLIC KEY-----`\nconst toRSAPrivate = key =>\n  `-----BEGIN RSA PRIVATE KEY-----\\n${key}\\n-----END RSA PRIVATE KEY-----`\nexport default async (req, res) => {\n  const key = new NodeRSA(toRSAPublic(conf.rsa.public))\n  key.importKey(\n    toRSAPrivate(process.env.RSA_PRIVATE.replace(/\\\\n/g, \"\\n\")),\n    \"private\"\n  )\n  const { client_id } = conf.alis\n  const base64 = new Buffer(\n    client_id + \":\" + process.env.ALIS_CLIENT_SECRET\n  ).toString(\"base64\")\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\")\n  res.setHeader(\"Content-Type\", \"application/json\")\n  const { query } = parse(req.url, true)\n  try {\n    const r = await fetch(\"https://alis.to/oauth2/token\", {\n      headers: {\n        Authorization: \"Basic \" + base64,\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      method: \"POST\",\n      body: toParams({\n        grant_type: \"authorization_code\",\n        code: query.code,\n        redirect_uri: conf.alis.redirect_uri,\n        code_verifier: query.verifier\n      })\n    }).then(r => r.json())\n    console.log(r)\n    if (xNil(r.error_message)) {\n      res.end(JSON.stringify(r))\n    } else {\n      try {\n        let op = {\n          headers: {\n            Authorization: r.access_token,\n            \"Content-Type\": \"application/json; charset=utf-8\"\n          }\n        }\n        let user = JSON.parse(\n          unescape(\n            await fetch(\"https://alis.to/oauth2api/me/info\", op).then(r =>\n              r.text()\n            )\n          )\n        )\n        const json_str = JSON.stringify({\n          uid: query.uid,\n          token: r.access_token,\n          refresh: r.refresh_token,\n          user: user,\n          crypt_id: query.crypt_id\n        })\n        const obj = key.encrypt(json_str, \"base64\")\n        const sign = key.sign(json_str, \"base64\", \"utf8\")\n        const base_url = hasPath([\"functions\", \"base_url\"])(conf)\n          ? conf.functions.base_url\n          : `https://${conf.fb.region}-${conf.fb.id}.cloudfunctions.net`\n        const href = `${base_url}/${$(\"login\")}?data=${encodeURIComponent(\n          obj\n        )}&signature=${encodeURIComponent(sign)}`\n        const reg = await fetch(href).then(r => r.json())\n        const json_str_reg = key.decrypt(reg.data, \"utf8\")\n        const verify = key.verify(json_str_reg, reg.signature, \"utf8\", \"base64\")\n        const json = JSON.parse(json_str_reg)\n        if (verify) {\n          res.end(JSON.stringify(json))\n        } else {\n          res.end(JSON.stringify({ err: \"signature invalid\" }))\n        }\n      } catch (e) {\n        console.log(e)\n        res.end(JSON.stringify(e))\n      }\n    }\n  } catch (e) {\n    res.send({ err: \"unknown err\" })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}